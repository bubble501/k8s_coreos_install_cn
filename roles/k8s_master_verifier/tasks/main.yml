- name: get kube-system namespaces info
  uri:
    url: 'http://127.0.0.1:8080/api/v1/namespaces'
    method: GET
    return_content: yes
  register: kubelet_info

- name: create the kube-system namespaces
  uri:
    url: 'http://127.0.0.1:8080/api/v1/namespaces'
    method: POST
    body: '{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"kube-system"}}'
    body_format: json
    async: 300
    poll: 10
    register: kubelet_status
  when: kubelet_info.content.find('kube-system') == -1

- name: waiting api port to be open
  wait_for:
    host: 127.0.0.1
    port: 10255
    delay: 5
    connect_timeout: 2
    timeout: 1800
  changed_when: false

- name: get metadata api information
  uri:
    url: 'http://localhost:10255/pods'
    method: GET
    return_content: yes
  register: api_result
  changed_when: false

- name: debug the result
  debug:
    msg: "kube-apiserver-{{ lookup(\'dig\', hostvars[inventory_hostname][\'priv_ip\']) }}"


- name: ensure pods are downloading or present
  assert:
    that:
      - "'kube-apiserver-{{ lookup(\'dig\', hostvars[inventory_hostname][\'priv_ip\']) }}' in api_result.content"
      - "'kube-scheduler-{{ lookup(\'dig\', hostvars[inventory_hostname][\'priv_ip\']) }}' in api_result.content"
      - "'kube-controller-manager-{{ lookup(\'dig\', hostvars[inventory_hostname][\'priv_ip\']) }}' in api_result.content"
      - "'kube-proxy-{{ lookup(\'dig\', hostvars[inventory_hostname][\'priv_ip\']) }}' in api_result.content"
